{"version":3,"sources":["CartItem.js","Cart.js","App.js","serviceWorker.js","index.js"],"names":["CartItem","id","name","price","qty","updateQty","className","onClick","disabled","Cart","initialItems","initialState","JSON","parse","window","localStorage","getItem","useState","items","setItems","useEffect","setItem","stringify","newQty","newItems","map","item","grandTotal","reduce","total","toFixed","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAoBeA,MAjBf,YAAuD,IAAnCC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,UAGxC,OACE,yBAAKC,UAAU,YACb,6BAAMJ,GACN,iCAAOC,GACP,6BACE,4BAAQI,QANM,kBAAMF,EAAUJ,EAAIG,EAAM,IAMVI,SAAUJ,GAAO,GAA/C,KACCA,EACD,4BAAQG,QATC,kBAAMF,EAAUJ,EAAIG,EAAM,KASnC,MAEF,wCAAcA,EAAMD,K,MCyBXM,MApCf,YAAgC,IAAhBC,EAAe,EAAfA,aACRC,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAD/B,EAGHC,mBAASN,GAAgBD,GAHtB,mBAGtBQ,EAHsB,KAGfC,EAHe,KAK7BC,qBAAU,WACRN,OAAOC,aAAaM,QAAQ,QAAST,KAAKU,UAAUJ,MACnD,CAACA,IAEJ,IAAMb,EAAY,SAACJ,EAAIsB,GACrB,IAAMC,EAAWN,EAAMO,KAAI,SAAAC,GACzB,OAAGA,EAAKzB,KAAOA,EACN,2BAAKyB,GAAZ,IAAkBtB,IAAKmB,IAElBG,KAETP,EAASK,IAGLG,EAAaT,EAAMU,QAAO,SAACC,EAAOH,GAAR,OAC9BG,EAAQH,EAAKtB,IAAMsB,EAAKvB,QACvB,GAAG2B,QAAQ,GAEd,OACE,yBAAKxB,UAAU,QACb,wBAAIA,UAAU,cAAd,iBACA,yBAAKA,UAAU,cACZY,EAAMO,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,eAAUK,IAAKL,EAAKzB,GAAII,UAAWA,GAAeqB,QAGtD,wBAAIpB,UAAU,cAAd,iBAA0CqB,KC/B1CT,G,MAAQ,CACZ,CAAEjB,GAAI,EAAGC,KAAM,iBAAkBC,MAAO,KAAMC,IAAK,GACnD,CAAEH,GAAI,EAAGC,KAAM,cAAeC,MAAO,KAAMC,IAAK,GAChD,CAAEH,GAAI,EAAGC,KAAM,aAAcC,MAAO,IAAMC,IAAK,KAWlC4B,MARf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAMI,aAAcQ,MCDNe,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfc1e03a.chunk.js","sourcesContent":["import React from \"react\";\nimport './CartItem.css';\n\nfunction CartItem({ id, name, price, qty, updateQty }){\n  const addOne = () => updateQty(id, qty + 1);\n  const subtractOne = () => updateQty(id, qty - 1);\n  return (\n    <div className=\"CartItem\">\n      <div>{name}</div>\n      <div>${price}</div>\n      <div>\n        <button onClick={subtractOne} disabled={qty <= 1}>-</button>\n        {qty}\n        <button onClick={addOne}>+</button>\n      </div>\n      <div>Total: ${qty * price}</div>\n    </div>\n  )\n}\n\nexport default CartItem;\n","import React, { useState, useEffect } from 'react';\nimport CartItem from './CartItem';\nimport './Cart.css';\n\nfunction Cart({ initialItems }){\n  const initialState = JSON.parse(window.localStorage.getItem('items'));\n\n  const [items, setItems] = useState(initialState || initialItems);\n\n  useEffect(() => {\n    window.localStorage.setItem('items', JSON.stringify(items));\n  }, [items])\n\n  const updateQty = (id, newQty) => {\n    const newItems = items.map(item => {\n      if(item.id === id) {\n        return { ...item, qty: newQty }\n      }\n      return item;\n    });\n    setItems(newItems);\n  }\n\n  const grandTotal = items.reduce((total, item) => (\n    total + item.qty * item.price\n  ), 0).toFixed(2);\n\n  return (\n    <div className=\"Cart\">\n      <h1 className=\"Cart-title\">Shopping Cart</h1>\n      <div className=\"Cart-items\">\n        {items.map(item => (\n          <CartItem key={item.id} updateQty={updateQty} {...item} />\n        ))}\n      </div>\n      <h2 className=\"Cart-total\">Grand Total: ${grandTotal}</h2>\n    </div>\n  )\n}\n\nexport default Cart;\n","import React from 'react';\nimport Cart from './Cart';\nimport './App.css';\n\nconst items = [\n  { id: 1, name: 'Taco Seasoning', price: 2.25, qty: 2 },\n  { id: 2, name: 'Pinto Beans', price: 1.99, qty: 3 },\n  { id: 3, name: 'Sour Cream', price: 3.50, qty: 1 },\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cart initialItems={items}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}